name: Build and Test k-NN
on:
  schedule:
    - cron: '0 0 * * *'  # every night
  push:
    branches:
      - "*"
      - "feature/**"
  pull_request:
    branches:
      - "*"
      - "feature/**"

jobs:
  Get-CI-Image-Tag:
    uses: opensearch-project/opensearch-build/.github/workflows/get-ci-image-tag.yml@main
    with:
      product: opensearch

  Build-k-NN-MacOS:
    strategy:
      matrix:
        java: [ 11 ]

    name: Build and Test k-NN Plugin on MacOS
    needs: Get-CI-Image-Tag
    runs-on: macos-latest

    steps:
      - name: Checkout k-NN
        uses: actions/checkout@v1

      # Setup git user so that patches for native libraries can be applied and committed
      - name: Setup git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Java ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      - name: Build native libraries
        run: |
          git submodule update --init --recursive
          brew reinstall gcc
          brew install llvm
          brew install openblas
          export FC=/opt/homebrew/bin/gfortran
          export PATH=/opt/homebrew/opt/llvm/bin:$PATH
          export CC=/opt/homebrew/opt/llvm/bin/clang
          export CXX=/opt/homebrew/opt/llvm/bin/clang++
          cd jni
          sed -i -e 's/\/usr\/local\/opt\/libomp\//\/opt\/homebrew\/opt\/llvm\//g' cmake/init-faiss.cmake
          sed -i -e 's/__aarch64__/__undefine_aarch64__/g' external/faiss/faiss/utils/distances_simd.cpp
          sed -i -e 's/pragma message WARN/pragma message /g' external/nmslib/similarity_search/src/distcomp_scalar.cc
          sed -i -e 's/-march=native/-mcpu=apple-m1/g' external/nmslib/similarity_search/CMakeLists.txt
          sed -i -e 's/-mcpu=apple-a14/-mcpu=apple-m1/g' external/nmslib/python_bindings/setup.py
          if sysctl -n machdep.cpu.features | grep -i AVX2;
          then
              echo "avx2 available on system"
              cmake . --fresh
          else
              echo "avx2 not available on system"
              cmake . --fresh -DSIMD_ENABLED=false
          fi
          cmake . --fresh
          make

      - name: Run build
        run: |
          # echo all files under ./jni/release
            echo "Files in ./jni/release:"
            echo "======================="
            pwd
            ls -l ./jni/release
            echo "======================="
          if sysctl -n machdep.cpu.features | grep -i AVX2;
          then
              echo "avx2 available on system"
              ./gradlew build -x buildJniLib
          else
              echo "avx2 not available on system"
              ./gradlew build -Dsimd.enabled=false -x buildJniLib
          fi
