From d9fa23e21c4e1213fc7582f617bf1a489eb12136 Mon Sep 17 00:00:00 2001
From: Junqiu Lei <junqiu@amazon.com>
Date: Tue, 23 Apr 2024 13:19:55 -0700
Subject: [PATCH] add patch for range search

---
 faiss/IndexIDMap.cpp | 64 +++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 60 insertions(+), 4 deletions(-)

diff --git a/faiss/IndexIDMap.cpp b/faiss/IndexIDMap.cpp
index dc84052b..1e07e0df 100644
--- a/faiss/IndexIDMap.cpp
+++ b/faiss/IndexIDMap.cpp
@@ -102,6 +102,23 @@ struct ScopedSelChange {
     }
 };
 
+/// RAII object to reset the IDGrouper in the params object
+struct ScopedGrpChange {
+    SearchParameters* params = nullptr;
+    IDGrouper* old_grp = nullptr;
+
+    void set(SearchParameters* params_2, IDGrouper* new_grp) {
+        this->params = params_2;
+        old_grp = params_2->grp;
+        params_2->grp = new_grp;
+    }
+    ~ScopedGrpChange() {
+        if (params) {
+            params->grp = old_grp;
+        }
+    }
+};
+
 } // namespace
 
 template <typename IndexT>
@@ -114,6 +131,8 @@ void IndexIDMapTemplate<IndexT>::search(
         const SearchParameters* params) const {
     IDSelectorTranslated this_idtrans(this->id_map, nullptr);
     ScopedSelChange sel_change;
+    IDGrouperTranslated this_idgrptrans(this->id_map, nullptr);
+    ScopedGrpChange grp_change;
 
     if (params && params->sel) {
         auto idtrans = dynamic_cast<const IDSelectorTranslated*>(params->sel);
@@ -131,6 +150,16 @@ void IndexIDMapTemplate<IndexT>::search(
             sel_change.set(params_non_const, &this_idtrans);
         }
     }
+
+    if (params && params->grp) {
+        auto idtrans = dynamic_cast<const IDGrouperTranslated*>(params->grp);
+
+        if (!idtrans) {
+            auto params_non_const = const_cast<SearchParameters*>(params);
+            this_idgrptrans.grp = params->grp;
+            grp_change.set(params_non_const, &this_idgrptrans);
+        }
+    }
     index->search(n, x, k, distances, labels, params);
     idx_t* li = labels;
 #pragma omp parallel for
@@ -147,11 +176,38 @@ void IndexIDMapTemplate<IndexT>::range_search(
         RangeSearchResult* result,
         const SearchParameters* params) const {
     if (params) {
-        SearchParameters internal_search_parameters;
-        IDSelectorTranslated id_selector_translated(id_map, params->sel);
-        internal_search_parameters.sel = &id_selector_translated;
+        IDSelectorTranslated this_idtrans(this->id_map, nullptr);
+        ScopedSelChange sel_change;
+        IDGrouperTranslated this_idgrptrans(this->id_map, nullptr);
+        ScopedGrpChange grp_change;
+
+        if (params->sel) {
+            auto idtrans = dynamic_cast<const IDSelectorTranslated*>(params->sel);
+
+            if (!idtrans) {
+                /*
+                FAISS_THROW_IF_NOT_MSG(
+                        idtrans,
+                        "IndexIDMap requires an IDSelectorTranslated on input");
+                */
+                // then make an idtrans and force it into the SearchParameters
+                // (hence the const_cast)
+                auto params_non_const = const_cast<SearchParameters*>(params);
+                this_idtrans.sel = params->sel;
+                sel_change.set(params_non_const, &this_idtrans);
+            }
+        }
 
-        index->range_search(n, x, radius, result, &internal_search_parameters);
+        if (params->grp) {
+            auto idtrans = dynamic_cast<const IDGrouperTranslated*>(params->grp);
+
+            if (!idtrans) {
+                auto params_non_const = const_cast<SearchParameters*>(params);
+                this_idgrptrans.grp = params->grp;
+                grp_change.set(params_non_const, &this_idgrptrans);
+            }
+        }
+        index->range_search(n, x, radius, result, params);
     } else {
         index->range_search(n, x, radius, result);
     }
-- 
2.39.0

